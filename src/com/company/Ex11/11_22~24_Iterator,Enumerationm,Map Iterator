-컬렉션에 저장된 데이터를 접근하는데 사용되는 인터페이스
boolean hasnext() - 읽어 올 요소가 남아있는지 확인한다. 있으면 true 없으면 false를 반환합니다
등등..

Iteator !
list set map 컬렉션에 저장도니 요소들을 읽어오는 방법을 표준화한것입니다.

boolean hasnext() 확인 - 읽어올 요소가 있는지 없는지..확인
Object next() 읽기 -다음요소를 읽어옵니다.

-컬렉션에 iterator()를 호출해서 Iterator를 구현한 객체를 얻어서 사용합니다


11-24 Map과 Iterator
    -Map에는 iterator()가 없다.
    iterator는 collection인터페이스에 있음
    map은 collection의 자손이 아니라...
    ketset(), entryset() ,values()를 호출해야 collecion이나 set을 얻어서 호출가능합니다.

    Map map =new HashMap()
    Iterator it = map.entrySet().iterator();


11-25 Arrays -배열을 다루기 편리한 메서드 제공
    1.배열의 출력 - toString()
        >>오버로딩되어있어서 문자열로 만들어줌..
    2.배열의 복사 -copyOf(),copyOfRange()
        >>배열을 생성해서 반환합니다
    3.배열 채우기 - fill(),setAll()
        >>Arrays.fill(arr,9); //arr=[9,9,9,9,9]
        >>Arays.setAll(arr,(i)->(int)(Maht.random()*5)+1); //arr=[1,5,2,1,1]
    4.배열의 정렬과 검색 - sort(),binarySearch()
        >>이진탐색 >>정렬된 배열에만 가능합니다.
        >>sort후에 이진탐색해야합니다.


    **순차 검색과 이진검색

    5.다차원 배열이 출력 - deepToString()
        >>sop(Arrays.deepToString)
    6.다차원 배열의 비교 - deepEquals()
    7.배열을 List로 변환 - asList(Object....a) 매개변수 여러개 넣을 수 있음
        >>List list  = Arrays.asList(1,2,3,4,5);
        list.add(6); //예외 발생
        List list = new ArrayList(Arrays.asList(1,2,3,4,5));
            >배열의 변경이 가능합니다.
    8.람다와 스트림 관련 -parallelXXX(),spliterator(),stream()





















